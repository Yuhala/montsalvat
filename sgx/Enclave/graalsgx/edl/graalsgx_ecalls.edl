/* Generated by GraalVM SGXProxyGenerator. */ 

enclave {
    trusted {
        public void graalsgx_ecall_relay_Contract([user_check]void *iso_thread, int param_1, int param_2);

        public int graalsgx_ecall_relay_add([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4, int param_5);

        public int graalsgx_ecall_relay_countMirrors([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public int graalsgx_ecall_relay_countNulls([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public void graalsgx_ecall_relay_getAsset([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public int graalsgx_ecall_relay_getRandStringT([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public void graalsgx_ecall_relay_greetPeer([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public void graalsgx_ecall_relay_greetPerson([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public void graalsgx_ecall_relay_hello([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, [in, count=param_5]char* param_4, int param_5);

        public void graalsgx_ecall_relay_initLedger([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public void graalsgx_ecall_relay_ledger_init([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public int graalsgx_ecall_relay_sendGreetings([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public void graalsgx_ecall_relay_transferAsset([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, [in, count=param_5]char* param_4, int param_5, int param_6, int param_7);

        public void graalsgx_ecall_relay_Peer([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public int graalsgx_ecall_relay_getBalance([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public int graalsgx_ecall_relay_getLedgerHash([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public int graalsgx_ecall_relay_getName([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public int graalsgx_ecall_relay_getPeerId([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public void graalsgx_ecall_relay_addAssets([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, [in, count=param_5]char* param_4, int param_5);

        public void graalsgx_ecall_relay_sayMyName([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, [in, count=param_5]char* param_4, int param_5);

        public void graalsgx_ecall_relay_setBalance([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public void graalsgx_ecall_relay_stringTest([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, [in, count=param_5]char* param_4, int param_5, int param_6);

        public void graalsgx_ecall_relay_setLedgerhash([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3, int param_4);

        public void graalsgx_ecall_doProxyCleanupIn([user_check]void *iso_thread);

        public void graalsgx_ecall_relay_sayHello([user_check]void *iso_thread, int param_1, [out, count=param_3]char* param_2, int param_3);

        public void graalsgx_ecall_mirrorCleanupOut([user_check]void *iso_thread, int param_1);

        public void graalsgx_ecall_mirrorCleanupIn([user_check]void *iso_thread, int param_1);

    };
};
